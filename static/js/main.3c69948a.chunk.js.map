{"version":3,"sources":["logo.svg","Calculator.js","NewGame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","roundPointCalculator","game","roundIndex","playerIndex","undefined","call","parseInt","result","toString","calculateResult","c","r","pSum","forEach","round","index","item","cIndex","sum","sumNumber","Math","floor","sumDecimal","abs","pNumber","pDecimal","x","totalDecimal","getSum","calculate","parseFloat","NewGame","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","state","initializeGame","editRoundIndex","gameId","players","nextProps","setState","_this2","react_default","a","createElement","Fragment","className","scope","type","onChange","e","handlePlayerChange","placeholder","onClick","startGame","value","gameResult","clearGameId","map","getItem","rowSpan","toFixed","Date","now","onSave","alert","onClearGameId","event","playerValue","target","_this3","key","getSelectRow","saveItem","length","editItem","_this4","items","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","entries","Symbol","iterator","next","done","_ref3","_ref2","slicedToArray","push","err","return","handleInputChange","roundArray","b","allbreaks","console","log","React","Component","App","games","localStorage","Array","from","JSON","parse","currentGameId","Number","currentGame","NewGame_NewGame","saveGame","getHistory","removeItem","gameIndex","setItem","allGames","stringify","allGamesResult","curentGameIndex","splice","gameStatusBtn","getTableRow","gameComplete","finishGame","saveGameIndex","unshift","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4LCAhC,SAASC,EAAqBC,EAAKC,EAAYC,GAEnD,QAAgCC,IAA7BH,EAAI,KAASC,KAA8BD,EAAI,KAASC,GAAYC,GACnE,MAAO,GAGX,IAAIE,EAAOC,SAASL,EAAI,KAASC,GAAYC,IAE7C,QAAkCC,IAA/BH,EAAI,OAAWC,KAA8BD,EAAI,OAAWC,GAAYC,GACvE,OAAOE,EAEX,IAAIE,EAASD,SAASL,EAAI,OAAWC,GAAYC,IAEjD,OAAGI,EAASF,EACD,IAAMA,EAETA,IAASE,EACDF,EAAKG,WAAa,KAElBH,EAAKG,WAAa,KAAOD,EAAOF,GAI7C,SAASI,EAAgBR,GAC5B,IAEIS,EAAEC,EADNC,EAAM,CAAC,EAAI,EAAI,EAAI,GAqBnB,OAlBAX,EAAI,KAASY,QAAQ,SAACC,EAAMC,GAE1Bd,EAAI,KAASc,GAAOF,QAAQ,SAACG,EAAKC,GAC/BP,EAAIT,EAAI,KAASc,GAAOE,GACxBN,EAAIV,EAAI,OAAWc,GAAOE,GASxBL,EAAKK,GAPHP,EAGKC,EAahB,SAAgBO,EAAKnB,GAEnB,IAAIoB,EAAsBC,KAAKC,MAAMH,GACjCI,EAAaF,KAAKG,IAAIL,GAAOE,KAAKG,IAAIH,KAAKC,MAAMH,IAEjDM,EAAmBJ,KAAKC,MAAMtB,GAC9B0B,EAAWL,KAAKG,IAAIxB,GAAKqB,KAAKG,IAAIH,KAAKC,MAAMtB,IAE7C2B,EAAIP,EAAYK,EAEhBG,EAAeL,EAAaG,EAG7BE,EAAe,IAChBD,GAAQ,EACRC,GAA8B,GAEhC,OAAGD,EAAI,GACG,GAAKN,KAAKG,IAAIG,GAAKC,GAEpBD,EAAIC,EA7BSC,CAAOhB,EAAKK,GAkCpC,SAAoBZ,EAAME,GACxB,IAAIW,EAAM,EAERA,EADCX,EAASF,GACD,EAAIA,EAEPA,IAASE,EACTF,EAEAA,GAASE,EAAOF,GAAM,GAE9B,OAAOa,EA5CmCW,CAAUC,WAAWpB,GAAGoB,WAAWnB,KAHvDC,EAAKK,GAAUa,WAAWpB,GAH1BE,EAAKK,GAAU,MAW9BL,MC3CUmB,cAEjB,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAEdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAA1B,KAAA+B,KAAMJ,KACDO,MAAQ,CACTtC,KAAOgC,EAAKO,eAAeR,EAAM/B,MAAOwC,eAAgB,MAJ9CR,8EAQHhC,GACX,OAAY,OAATA,EACe,CACVyC,OAAQ,KACRC,QAAS,CAAC,KAAK,KAAK,KAAK,MACzBtC,KAAM,CAAC,CAAC,KAAK,KAAK,KAAK,OACvBE,OAAQ,CAAC,CAAC,KAAK,KAAK,KAAK,QAItBN,oDAIW2C,GAEtBR,KAAKS,SAAS,CAAE5C,KAAMmC,KAAKI,eAAeI,EAAU3C,yCAG/C,IAAA6C,EAAAV,KAEL,GAA8B,OAA3BA,KAAKG,MAAMtC,KAAKyC,OACf,OACIK,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,SAAOE,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAML,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAKT,EAAKU,mBAAmBD,EAAG,IAAIE,YAAY,cAC7FV,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAML,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAKT,EAAKU,mBAAmBD,EAAG,IAAIE,YAAY,cAC7FV,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAML,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAKT,EAAKU,mBAAmBD,EAAG,IAAIE,YAAY,cAC7FV,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAML,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAKT,EAAKU,mBAAmBD,EAAG,IAAIE,YAAY,cAC7FV,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAML,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASK,QAAS,kBAAIZ,EAAKa,aAAaC,MAAM,wBAQ9F,IAAIC,EAAapD,EAAgB2B,KAAKG,MAAMtC,MAC5C,OACA8C,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAAA,SAAOE,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAV,SACAL,EAAAC,EAAAC,cAAA,MAAIG,MAAM,QACVL,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAOhB,KAAKG,MAAMtC,KAAX,QAA2B,IAC5C8C,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAOhB,KAAKG,MAAMtC,KAAX,QAA2B,IAC5C8C,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAOhB,KAAKG,MAAMtC,KAAX,QAA2B,IAC5C8C,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAOhB,KAAKG,MAAMtC,KAAX,QAA2B,IAC5C8C,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAML,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASK,QAAS,kBAAIZ,EAAKgB,eAAeF,MAAM,iBAGhFb,EAAAC,EAAAC,cAAA,aAEOb,KAAKG,MAAMtC,KAAX,KAAwB8D,IAAI,SAAEjD,EAAOZ,GAAT,OAC5B4C,EAAKkB,QAAQlD,EAAMZ,MAI1B6C,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,MAAIgB,QAAQ,KAAZ,UACAlB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAMY,EAAW,GAAGK,QAAQ,IAC5BnB,EAAAC,EAAAC,cAAA,UAAMY,EAAW,GAAGK,QAAQ,IAC5BnB,EAAAC,EAAAC,cAAA,UAAMY,EAAW,GAAGK,QAAQ,IAC5BnB,EAAAC,EAAAC,cAAA,UAAMY,EAAW,GAAGK,QAAQ,4CASlC,GAAI9B,KAAKG,MAAMtC,KAAK0C,QAAQ,IAAOP,KAAKG,MAAMtC,KAAK0C,QAAQ,IAAOP,KAAKG,MAAMtC,KAAK0C,QAAQ,IAAOP,KAAKG,MAAMtC,KAAK0C,QAAQ,GAGrH,CACA,IAAMD,EAASyB,KAAKC,MAChBnE,EAAOmC,KAAKG,MAAMtC,KACtBA,EAAKyC,OAASA,EACdN,KAAKS,SAAS,CAAC5C,KAAKA,IACpBmC,KAAKJ,MAAMqC,OAAOpE,QAPlBqE,MAAM,2DAYVlC,KAAKJ,MAAMuC,cAAcnC,KAAKG,MAAMtC,iDAGrBuE,EAAMrE,GACrB,IAAMsE,EAAcD,EAAME,OAAOd,MAC7B3D,EAAOmC,KAAKG,MAAMtC,KACtBA,EAAK0C,QAAQxC,GAAesE,EAC5BrC,KAAKS,SAAS,CAAC5C,KAAKA,oCAIfa,EAAMZ,GAAY,IAAAyE,EAAAvC,KACvB,OAAGA,KAAKG,MAAME,iBAAmBvC,EAEzB6C,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAAA,MAAIE,UAAU,YAAYyB,IAAK1E,GAC3B6C,EAAAC,EAAAC,cAAA,MAAIgB,QAAQ,KAAK/D,EAAW,GAC5B6C,EAAAC,EAAAC,cAAA,kBAEIb,KAAKyC,cAAa,EAAK,EAAE/D,EAAM,IAG/BsB,KAAKyC,cAAa,EAAK,EAAE/D,EAAM,IAG/BsB,KAAKyC,cAAa,EAAK,EAAE/D,EAAM,IAG/BsB,KAAKyC,cAAa,EAAK,EAAE/D,EAAM,IAGnCiC,EAAAC,EAAAC,cAAA,MAAIgB,QAAQ,KAAIlB,EAAAC,EAAAC,cAAA,UAAQS,QAAS,WAAMiB,EAAKG,SAAS5E,KAArC,YAEpB6C,EAAAC,EAAAC,cAAA,MAAIE,UAAU,aAEVJ,EAAAC,EAAAC,cAAA,mBAEIb,KAAKyC,cAAa,EAAM,EAAEzC,KAAKG,MAAMtC,KAAX,OAA0BC,IAAekC,KAAKG,MAAMtC,KAAX,OAA0BC,GAAY,IAGzGkC,KAAKyC,cAAa,EAAM,EAAEzC,KAAKG,MAAMtC,KAAX,OAA0BC,IAAekC,KAAKG,MAAMtC,KAAX,OAA0BC,GAAY,IAGzGkC,KAAKyC,cAAa,EAAM,EAAEzC,KAAKG,MAAMtC,KAAX,OAA0BC,IAAekC,KAAKG,MAAMtC,KAAX,OAA0BC,GAAY,IAGzGkC,KAAKyC,cAAa,EAAM,EAAEzC,KAAKG,MAAMtC,KAAX,OAA0BC,IAAekC,KAAKG,MAAMtC,KAAX,OAA0BC,GAAY,MAQrH6C,EAAAC,EAAAC,cAAA,MAAIE,UAAWf,KAAKG,MAAMtC,KAAX,KAAwB8E,OAAO,IAAM7E,EAAa,YAAY,GAAI0E,IAAK1E,GAClF6C,EAAAC,EAAAC,cAAA,UAAM/C,EAAW,GACjB6C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAMjD,EAAqBoC,KAAKG,MAAMtC,KAAKC,EAAW,IACtD6C,EAAAC,EAAAC,cAAA,UAAMjD,EAAqBoC,KAAKG,MAAMtC,KAAKC,EAAW,IACtD6C,EAAAC,EAAAC,cAAA,UAAMjD,EAAqBoC,KAAKG,MAAMtC,KAAKC,EAAW,IACtD6C,EAAAC,EAAAC,cAAA,UAAMjD,EAAqBoC,KAAKG,MAAMtC,KAAKC,EAAW,IACtD6C,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQS,QAAS,WAAMiB,EAAKK,SAAS9E,KAArC,iDAMFG,EAAKH,EAAYuE,GAAa,IAAAQ,EAAA7C,KAElC8C,EAAQ,GAF0BC,GAAA,EAAAC,GAAA,EAAAC,OAAAjF,EAAA,IAGxC,QAAAkF,EAAAC,EAA6B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,IAAIC,UAA/DC,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EAA0E,KAAAU,EAAAP,EAAA1B,MAAAkC,EAAA5D,OAAA6D,EAAA,EAAA7D,CAAA2D,EAAA,GAA9D9E,EAA8D+E,EAAA,GAAvDlC,EAAuDkC,EAAA,GACtEZ,EAAMc,KAAKjD,EAAAC,EAAAC,cAAA,UAAQ2B,IAAK7D,EAAO6C,MAAOA,GAAQA,KAJV,MAAAqC,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAMxC,OACItC,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAQW,MAAOa,EAAanB,SAAU,SAACC,GAAD,OAAM0B,EAAKkB,kBAAkB5C,EAAElD,EAAKH,KACtE6C,EAAAC,EAAAC,cAAA,UAAQW,MAAM,IAAd,UACCsB,8CAMCV,EAAOnE,EAAKH,GAC1B,IAAM0D,EAA+B,KAAvBY,EAAME,OAAOd,MAAe,KAAOY,EAAME,OAAOd,MAC1DwC,EAAahE,KAAKG,MAAMtC,KACzBI,EACC+F,EAAU,KAAShE,KAAKG,MAAME,gBAAgBvC,GAAc0D,EAE5DwC,EAAU,OAAWhE,KAAKG,MAAME,gBAAgBvC,GAAc0D,EAElExB,KAAKS,SAAS,CAAC5C,KAAMmG,qCAGflG,GAEN,IAAIkG,EAAahE,KAAKG,MAAMtC,KACxBmC,KAAKG,MAAMtC,KAAX,KAAwBC,KACxBkG,EAAU,KAASlG,GAAc,CAAC,KAAK,KAAK,KAAK,OAEjDkC,KAAKG,MAAMtC,KAAX,OAA0BC,KAC1BkG,EAAU,OAAWlG,GAAc,CAAC,KAAK,KAAK,KAAK,OAGvDkC,KAAKS,SAAS,CAACJ,eAAevC,EAAYD,KAAKmG,qCAG1ClG,GACL,IAAIQ,EAAI0B,KAAKG,MAAMtC,KAAX,KAAwBC,GAC5BmG,EAAIjE,KAAKG,MAAMtC,KAAX,OAA0BC,GAC9BoG,GAAY,EAChB,GAAY,OAAT5F,EAAE,IAAwB,OAATA,EAAE,IAAwB,OAATA,EAAE,IAAwB,OAATA,EAAE,GAAxD,CAIK,GAAY,OAAT2F,EAAE,IAAwB,OAATA,EAAE,IAAwB,OAATA,EAAE,IAAwB,OAATA,EAAE,GAAY,CACrE,GAAY,OAATA,EAAE,IAAwB,OAATA,EAAE,IAAwB,OAATA,EAAE,IAAwB,OAATA,EAAE,GAEpD,YADA/B,MAAM,oBAIN,GAAGhE,SAAS+F,EAAE,IAAI/F,SAAS+F,EAAE,IAAI/F,SAAS+F,EAAE,IAAI/F,SAAS+F,EAAE,MAAQ,GAE/D,YADA/B,MAAM,4BAINgC,GAAY,EAKxB,IAAIrG,EAAOmC,KAAKG,MAAMtC,KACtBsG,QAAQC,IAAIvG,EAAI,KAAS8E,OAAQ7E,GAC9BoG,GAAcrG,EAAI,KAAS8E,OAAS,IAAM7E,GAAcA,EAAa,IACpED,EAAI,KAAS+F,KAAK,CAAC,KAAK,KAAK,KAAK,OAClC/F,EAAI,OAAW+F,KAAK,CAAC,KAAK,KAAK,KAAK,QAExC5D,KAAKS,SAAS,CAACJ,eAAgB,OAC/BL,KAAKJ,MAAMqC,OAAOjC,KAAKG,MAAMtC,WA1BzBqE,MAAM,yBApNmBmC,IAAMC,WCGtBC,qBAEnB,SAAAA,EAAY3E,GAAM,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuE,GAChB1E,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyE,GAAAtG,KAAA+B,KAAMJ,IACN,IAAI4E,EAAQC,aAAa7C,QAAQ,SAAW8C,MAAMC,KAAKC,KAAKC,MAAMJ,aAAa7C,QAAQ,WAAa,GAChGkD,EAAgBL,aAAa7C,QAAQ,iBACzCkD,EAAgBA,EAAgBC,OAAOD,GAAiB,KACxD,IAAIE,EAAc,KALF,OAMhBR,EAAM/F,QAAQ,SAACZ,EAAKc,GACfd,EAAKyC,SAAWwE,IACjBE,EAAcnH,KAIlBgC,EAAKM,MAAQ,CAACqE,MAAMA,EAAMQ,YAAaA,GAZvBnF,wEAeR,IAAAa,EAAAV,KAER,OACAW,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAAA,kCAEFF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,4BACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBAEXJ,EAAAC,EAAAC,cAACoE,EAAD,CAASzC,IAAKxC,KAAKG,MAAMtC,KAAKmC,KAAKG,MAAMtC,KAAKyC,OAAOyB,KAAKC,MAAOC,OAAQ,SAACpE,GAAD,OAAQ6C,EAAKwE,SAASrH,IAAOsE,cAAiB,SAAC6C,GAAD,OAAetE,EAAKgB,YAAYsD,IAAcnH,KAAMmC,KAAKG,MAAM6E,eAG1LrE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OAEXf,KAAKmF,oDAQHH,GACVhF,KAAKS,SAAS,CAACuE,YAAY,OAC3BP,aAAaW,WAAW,0DAGT9E,GACf,IAAI0E,EAAc,KAClBhF,KAAKG,MAAMqE,MAAM/F,QAAQ,SAACZ,EAAKwH,GAC1BxH,EAAKyC,SAAWA,IACjB0E,EAAcnH,KAGlBmC,KAAKS,SAAS,CAACuE,YAAaA,IAC5BhF,KAAKyE,aAAaa,QAAQ,gBAAgBhF,wCAGhC,IAAAiC,EAAAvC,KACNuF,EAAWX,KAAKC,MAAMD,KAAKY,UAAUxF,KAAKG,MAAMqE,QAChDiB,EAAiB,GACjBC,EAAkB,KActB,GAZAH,EAAS9G,QAAQ,SAACZ,EAAKc,GAElB4D,EAAKpC,MAAM6E,aAAenH,EAAKyC,SAAWiC,EAAKpC,MAAM6E,YAAY1E,SAClEoF,EAAkB/G,GAElB8G,EAAe9G,GAASN,EAAgBR,KAEtB,OAAnB6H,IACDH,EAASI,OAAOD,EAAgB,GAChCD,EAAeE,OAAOD,EAAgB,IAGrCH,EAAS5C,OACV,OACC4C,EAAS5D,IAAI,SAAE9D,EAAMwH,GAAR,OACV1E,EAAAC,EAAAC,cAAA,SAAO2B,IAAK6C,EAAWtE,UAAU,oBAC/BJ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAV,SACAL,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAOnD,EAAI,QAAY,IACjC8C,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAOnD,EAAI,QAAY,IACjC8C,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAOnD,EAAI,QAAY,IACjC8C,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAOnD,EAAI,QAAY,IACjC8C,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAOuB,EAAKqD,cAAc/H,MAGxC8C,EAAAC,EAAAC,cAAA,aACK0B,EAAKsD,YAAYhI,IAEtB8C,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,UAAK4E,EAAeJ,GAAW,GAAGvD,QAAQ,IAC1CnB,EAAAC,EAAAC,cAAA,UAAK4E,EAAeJ,GAAW,GAAGvD,QAAQ,IAC1CnB,EAAAC,EAAAC,cAAA,UAAK4E,EAAeJ,GAAW,GAAGvD,QAAQ,IAC1CnB,EAAAC,EAAAC,cAAA,UAAK4E,EAAeJ,GAAW,GAAGvD,QAAQ,IAC1CnB,EAAAC,EAAAC,cAAA,sDAUEhD,GAAK,IAAAgF,EAAA7C,KACb8F,GAAe,EAcnB,OAb2B,IAAxBjI,EAAI,KAAS8E,OACd9E,EAAI,KAASY,QAAQ,SAACR,EAAKU,GAC3Bd,EAAI,KAASc,GAAOF,QAAQ,SAACC,EAAMX,GACO,OAArCF,EAAI,KAASc,GAAOZ,IAAgE,OAAvCF,EAAI,OAAWc,GAAOZ,KACpE+H,GAAe,OAMnBA,GAAe,EAGdA,EACM,GAGqB,MAAzB9F,KAAKG,MAAM6E,YACLrE,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASK,QAAS,kBAAIuB,EAAKkD,WAAWlI,EAAKyC,SAASkB,MAAM,WAGtE,sCAOFlB,GACT,IAAIkE,EAAQxE,KAAKG,MAAMqE,MACnBQ,EAAchF,KAAKG,MAAMtC,KAC7B2G,EAAM/F,QAAQ,SAACZ,EAAKc,GACfd,EAAKyC,SAAWA,IACjB0E,EAAcnH,KAGlBmC,KAAKS,SAAS,CAACuE,YAAaA,IAC5BP,aAAaa,QAAQ,gBAAgBhF,oCAG9B4E,GAEP,IAAM5E,EAAS4E,EAAS5E,OACpB0F,EAAgB,KAChBxB,EAAQI,KAAKC,MAAMD,KAAKY,UAAUxF,KAAKG,MAAMqE,QACjDA,EAAM/F,QAAQ,SAACZ,EAAKc,GACfd,EAAKyC,SAAWA,IACjB0F,EAAgBrH,KAGC,OAAlBqH,EACDxB,EAAMwB,GAAiBd,EAGvBV,EAAMyB,QAAQf,GAEbV,EAAM7B,OAAS,KAChB6B,EAAQA,EAAMmB,OAAO,EAAE,KAEzB3F,KAAKS,SAAS,CAAC+D,MAAMA,EAAMQ,YAAYE,IACvCT,aAAaa,QAAQ,QAAQV,KAAKY,UAAUhB,IAC5CC,aAAaa,QAAQ,gBAAgBJ,EAAS5E,4CAIpCzC,GACR,OACEA,EAAI,KAAS8D,IAAI,SAAEjD,EAAOZ,GAAT,OACf6C,EAAAC,EAAAC,cAAA,MAAI2B,IAAK1E,GACP6C,EAAAC,EAAAC,cAAA,UAAK/C,EAAW,GAChB6C,EAAAC,EAAAC,cAAA,UAAMjD,EAAqBC,EAAKC,EAAW,IAC3C6C,EAAAC,EAAAC,cAAA,UAAMjD,EAAqBC,EAAKC,EAAW,IAC3C6C,EAAAC,EAAAC,cAAA,UAAMjD,EAAqBC,EAAKC,EAAW,IAC3C6C,EAAAC,EAAAC,cAAA,UAAMjD,EAAqBC,EAAKC,EAAW,cAtLtBuG,IAAMC,YCMnB4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO7F,EAAAC,EAAAC,cAAC4F,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3c69948a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export  function roundPointCalculator(game,roundIndex, playerIndex){\n\n    if(game['call'][roundIndex] === undefined || !game['call'][roundIndex][playerIndex] ){\n        return '';\n    }\n\n    let call = parseInt(game['call'][roundIndex][playerIndex]);\n\n    if(game['result'][roundIndex] === undefined || !game['result'][roundIndex][playerIndex] ){\n        return call;\n    }\n    let result = parseInt(game['result'][roundIndex][playerIndex]);\n    \n    if(result < call) {\n        return '-' + call;\n    }\n    else if(call === result ){\n        return '' + call.toString() + '.0';\n    }else{\n        return '' + call.toString() + '.' + (result-call);\n    }\n}\n\nexport function calculateResult(game){\n    let \n    pSum =[0.0,0.0,0.0,0.0];\n    let c,r;\n    \n    game['call'].forEach((round,index) =>{\n\n      game['call'][index].forEach((item,cIndex) => {\n         c = game['call'][index][cIndex];\n         r = game['result'][index][cIndex];\n\n         if(!c){\n           pSum[cIndex] = pSum[cIndex] + 0.0;\n         }\n         else if(!r){\n           pSum[cIndex] = pSum[cIndex] + parseFloat(c);\n         }\n         else{\n           pSum[cIndex] = getSum(pSum[cIndex],calculate(parseFloat(c),parseFloat(r)));\n         }\n      });\n    });\n\n    return pSum;\n     \n  }\n\n  function getSum(sum, p){\n\n    let sumNumber = sum < 0 ? Math.floor(sum) : Math.floor(sum);\n    let sumDecimal = Math.abs(sum) - Math.abs(Math.floor(sum));\n\n    let pNumber = p < 0 ?  Math.floor(p) : Math.floor(p);\n    let pDecimal = Math.abs(p) - Math.abs(Math.floor(p));\n\n    let x = sumNumber + pNumber;\n\n    let totalDecimal = sumDecimal + pDecimal;\n\n    \n    if(totalDecimal > 1){\n      x = x + 1 ;\n      totalDecimal = totalDecimal - 1;\n    }\n    if(x < 0 ) {\n      return -1 * (Math.abs(x) + totalDecimal);\n    }else {\n      return x + totalDecimal;\n    }\n\n  }\n\n  function calculate (call, result) {\n    let sum = 0.0;\n    if(result < call) {\n      sum =  - 1 * call;\n    }\n    else if(call === result ){\n      sum = call;\n    }else{\n      sum = call +  (result-call)/10;\n    }\n    return sum;\n  }","import React from 'react';\nimport {roundPointCalculator,calculateResult} from './Calculator.js';\n\nexport default class NewGame extends React.Component {\n\n    constructor(props){\n\n        super(props);\n        this.state = {\n            game : this.initializeGame(props.game), editRoundIndex: null\n        }\n    }\n\n    initializeGame(game){\n        if(game === null){\n            return game = {\n                gameId: null,\n                players: [null,null,null,null],\n                call: [[null,null,null,null]],\n                result: [[null,null,null,null]]\n            }\n        }\n        else{\n            return game;\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        this.setState({ game: this.initializeGame(nextProps.game) });  \n    }\n\n    render() {\n\n        if(this.state.game.gameId === null){\n            return (\n                <>\n                    <table className=\"table table-dark\">\n                        <thead>\n                        <tr>\n                            <th scope=\"col\"><input type=\"text\" onChange={(e)=>this.handlePlayerChange(e, 0)} placeholder=\"Player 1\"/></th>\n                            <th scope=\"col\"><input type=\"text\" onChange={(e)=>this.handlePlayerChange(e, 1)} placeholder=\"Player 2\"/></th>\n                            <th scope=\"col\"><input type=\"text\" onChange={(e)=>this.handlePlayerChange(e, 2)} placeholder=\"Player 3\"/></th>\n                            <th scope=\"col\"><input type=\"text\" onChange={(e)=>this.handlePlayerChange(e, 3)} placeholder=\"Player 4\"/></th>\n                            <th scope=\"col\"><input type=\"button\" onClick={()=>this.startGame()} value=\"Start New Game\"/></th>\n                        </tr>\n                        </thead>\n                    </table>\n                </>\n            )\n        }\n\n        let gameResult = calculateResult(this.state.game);\n        return (\n        <>\n        <table className=\"table table-dark\">\n            <thead>\n              <tr>\n                <th scope=\"col\">Round</th>\n                <th scope=\"col\"></th>\n                <th scope=\"col\">{this.state.game['players'][0]}</th>\n                <th scope=\"col\">{this.state.game['players'][1]}</th>\n                <th scope=\"col\">{this.state.game['players'][2]}</th>\n                <th scope=\"col\">{this.state.game['players'][3]}</th>\n                <th scope=\"col\"><input type=\"button\" onClick={()=>this.clearGameId()} value=\"Save Game\"/></th>\n              </tr>\n            </thead>\n            <tbody>\n               { \n                   this.state.game['call'].map(( round, roundIndex ) => (\n                   this.getItem(round,roundIndex)\n                ))\n                }\n            </tbody>\n            <tfoot>\n              <tr>\n              <td rowSpan=\"2\">Result</td>\n              <td></td>\n              <td>{ gameResult[0].toFixed(1) }</td>\n              <td>{ gameResult[1].toFixed(1) }</td>\n              <td>{ gameResult[2].toFixed(1) }</td>\n              <td>{ gameResult[3].toFixed(1) }</td>\n              </tr>\n            </tfoot>\n          </table>\n          </>\n        )\n    }\n\n    startGame(){\n        if(!this.state.game.players[0] || !this.state.game.players[1] || !this.state.game.players[2] || !this.state.game.players[3]){\n            alert('Enter all players');\n        }\n        else{\n            const gameId = Date.now();\n            let game = this.state.game;\n            game.gameId = gameId;\n            this.setState({game:game});\n            this.props.onSave(game);\n        }\n    }\n\n    clearGameId(){\n        this.props.onClearGameId(this.state.game);\n    }\n\n    handlePlayerChange(event,playerIndex) {\n        const playerValue = event.target.value;\n        let game = this.state.game;\n        game.players[playerIndex] = playerValue;\n        this.setState({game:game});\n        \n    }\n\n    getItem (round,roundIndex) {\n        if(this.state.editRoundIndex === roundIndex ){\n            return (\n                <>\n                <tr className=\"edit-mode\" key={roundIndex}>\n                    <td rowSpan=\"2\">{roundIndex+1}</td>\n                    <td>call</td>\n                    {\n                        this.getSelectRow(true,0,round[0])\n                    }\n                    {\n                        this.getSelectRow(true,1,round[1])\n                    }\n                    {\n                        this.getSelectRow(true,2,round[2])\n                    }\n                    {\n                        this.getSelectRow(true,3,round[3])\n                    }\n                    \n                    <td rowSpan=\"2\"><button onClick={()=> {this.saveItem(roundIndex)}}> Save </button></td>\n                </tr>\n                <tr className=\"edit-mode\">\n                    \n                    <td>break</td>\n                    {\n                        this.getSelectRow(false,0,this.state.game['result'][roundIndex] && this.state.game['result'][roundIndex][0])\n                    }\n                    {\n                        this.getSelectRow(false,1,this.state.game['result'][roundIndex] && this.state.game['result'][roundIndex][1])\n                    }\n                    {\n                        this.getSelectRow(false,2,this.state.game['result'][roundIndex] && this.state.game['result'][roundIndex][2])\n                    }\n                    {\n                        this.getSelectRow(false,3,this.state.game['result'][roundIndex] && this.state.game['result'][roundIndex][3])\n                    }\n                </tr>\n            </>\n            )\n        }else {\n        \n        return (\n            <tr className={this.state.game['call'].length-1 === roundIndex ? \"edit-mode\":\"\"} key={roundIndex}>\n                <td >{roundIndex+1}</td>\n                <td ></td>\n                <td>{ roundPointCalculator(this.state.game,roundIndex,0)}</td>\n                <td>{ roundPointCalculator(this.state.game,roundIndex,1)}</td>\n                <td>{ roundPointCalculator(this.state.game,roundIndex,2)}</td>\n                <td>{ roundPointCalculator(this.state.game,roundIndex,3)}</td>\n                <td><button onClick={()=> {this.editItem(roundIndex)}}> Edit </button></td>\n            </tr>\n        )\n        }\n    }\n\n    getSelectRow (call,roundIndex, playerValue) {\n        \n        const items = [];\n        for (const [index, value] of [0,1,2,3,4,5,6,7,8,9,10,11,12,13].entries()) {\n            items.push(<option key={index} value={value}>{value}</option>)\n        }\n        return (\n            <td>\n                <select value={playerValue} onChange={(e)=> this.handleInputChange(e,call,roundIndex)}>\n                    <option value=\"\">Select</option>\n                    {items}\n                </select>\n            </td>\n        );\n    }\n\n    handleInputChange(event, call,roundIndex) {\n        const value = event.target.value === \"\" ? null : event.target.value; \n        let roundArray = this.state.game;\n        if(call){\n            roundArray['call'][this.state.editRoundIndex][roundIndex] = value;\n        }else{\n            roundArray['result'][this.state.editRoundIndex][roundIndex] = value;\n        }\n        this.setState({game: roundArray});\n    }\n\n    editItem (roundIndex){\n\n        let roundArray = this.state.game;\n        if(!this.state.game['call'][roundIndex]){\n            roundArray['call'][roundIndex] = [null,null,null,null];\n        }\n        if(!this.state.game['result'][roundIndex]){\n            roundArray['result'][roundIndex] = [null,null,null,null];\n        }\n\n        this.setState({editRoundIndex:roundIndex, game:roundArray});\n    }\n\n    saveItem(roundIndex){\n        let c = this.state.game['call'][roundIndex];\n        let b = this.state.game['result'][roundIndex];\n        let allbreaks = false;\n        if(c[0] === null || c[1] === null || c[2] === null || c[3] === null){\n            alert('Enter all call');\n            return;\n            }\n        else if(b[0] !== null || b[0] !== null || b[0] !== null || b[0] !== null){\n            if(b[0] === null || b[1] === null || b[2] === null || b[3] === null){\n                alert('Enter all breaks');\n                return;\n        }\n            else{\n                if(parseInt(b[0])+parseInt(b[1])+parseInt(b[2])+parseInt(b[3]) !== 13){\n                    alert('Sum of breaks must be 13');\n                    return;\n                }\n                else{\n                    allbreaks = true;\n                }\n            }\n        }\n\n        let game = this.state.game;\n        console.log(game['call'].length, roundIndex)\n        if(allbreaks && (game['call'].length) -1 === roundIndex && roundIndex < 4){\n            game['call'].push([null,null,null,null]);\n            game['result'].push([null,null,null,null])\n            }\n        this.setState({editRoundIndex: null});\n        this.props.onSave(this.state.game);\n\n\n        // let resultEntry = false, allEntry = true, resultSum = 0;\n        // let resultMessage = '';\n        // for (const [key,value] of this.state.game['result'][this.state.editRoundIndex].entries()) {\n        //     if(value){\n        //         resultEntry = true;\n        //     }\n        // }\n        // if(resultEntry){\n        //     for (const [key,value] of this.state.game['result'][this.state.editRoundIndex].entries()) {\n        //         if(value){\n        //             resultSum = resultSum + parseInt(value);\n        //         }\n        //         else{\n        //             allEntry = false;\n        //         }\n        //     }\n        // }\n\n        // if(resultEntry){\n        //     if(!allEntry){\n        //         resultMessage = 'Enter all points';\n        //     }\n        //     else if(resultSum !== 13) {\n                \n        //         resultMessage = 'Sum of all points must be 13';\n        //     }\n        //     else{\n                \n        //         let game = this.state.game;\n        //         if(game['call'].length < 5){\n        //             game['call'].push([null,null,null,null]) ;\n        //             game['result'].push([null,null,null,null]);\n        //         }\n        //         this.setState({editRoundIndex: null, resultMessage:resultMessage });\n\n        //     }\n        // }\n        // else{\n        //     this.setState({editRoundIndex: null, resultMessage:null });\n        //     this.props.onSave(this.state.game);\n        // }\n        // if(resultMessage !== ''){\n        //     alert(resultMessage);\n        // }\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport NewGame from './NewGame'\nimport './App.css';\nimport {roundPointCalculator,calculateResult} from './Calculator.js';\n\nexport default class App extends React.Component {\n\n  constructor(props){\n    super(props);\n    let games = localStorage.getItem('games') ? Array.from(JSON.parse(localStorage.getItem('games'))) : [];\n    let currentGameId = localStorage.getItem('currentGameId');\n    currentGameId = currentGameId ? Number(currentGameId) : null;\n    let currentGame = null;\n    games.forEach((game,index) => {\n      if(game.gameId === currentGameId){\n        currentGame = game;\n      }\n    });\n    \n    this.state = {games:games,currentGame: currentGame};\n  }\n\n  render () {\n\n    return (\n    <div className=\"App container\">\n      <header className=\"App-header\">\n        <h2>Call Break Counter </h2>\n      </header>\n      <div className=\"container body-container\">\n        <div className=\"row current-game\">\n          {\n            <NewGame key={this.state.game?this.state.game.gameId:Date.now()} onSave={(game)=>this.saveGame(game)} onClearGameId = {(currentGame)=>this.clearGameId(currentGame)} game={this.state.currentGame}/>\n          }\n        </div>\n        <div className=\"row\">\n          { \n            this.getHistory()\n          }\n        </div>\n      </div>\n      </div>\n    )\n  }\n\n  clearGameId(currentGame){\n    this.setState({currentGame:null});\n    localStorage.removeItem('currentGameId');\n  }\n\n  setCurrentGameId(gameId){\n    let currentGame = null;\n    this.state.games.forEach((game,gameIndex) => {\n      if(game.gameId === gameId){\n        currentGame = game;\n      }\n    });\n    this.setState({currentGame: currentGame});\n    this.localStorage.setItem('currentGameId',gameId);\n  }\n\n  getHistory(){\n    let allGames = JSON.parse(JSON.stringify(this.state.games));\n    let allGamesResult = [];\n    let curentGameIndex = null;\n    \n    allGames.forEach((game,index) => {\n      \n      if(this.state.currentGame && game.gameId === this.state.currentGame.gameId){\n        curentGameIndex = index;\n      }\n        allGamesResult[index] = calculateResult(game);\n    });\n    if(curentGameIndex !==null){\n      allGames.splice(curentGameIndex,1);\n      allGamesResult.splice(curentGameIndex,1);\n    }\n\n    if(allGames.length){\n      return (\n       allGames.map(( game, gameIndex ) => (\n          <table key={gameIndex} className=\"table table-dark\">\n            <thead>\n              <tr>\n                <th scope=\"col\">Round</th>\n                <th scope=\"col\">{game['players'][0]}</th>\n                <th scope=\"col\">{game['players'][1]}</th>\n                <th scope=\"col\">{game['players'][2]}</th>\n                <th scope=\"col\">{game['players'][3]}</th>\n                <th scope=\"col\">{this.gameStatusBtn(game)}</th>\n              </tr>\n            </thead>\n            <tbody>\n               { this.getTableRow(game)}\n            </tbody>\n            <tfoot>\n              <tr>\n              <td>Result</td>\n              <td>{allGamesResult[gameIndex][0].toFixed(1)}</td>\n              <td>{allGamesResult[gameIndex][1].toFixed(1)}</td>\n              <td>{allGamesResult[gameIndex][2].toFixed(1)}</td>\n              <td>{allGamesResult[gameIndex][3].toFixed(1)}</td>\n              <td></td>\n              </tr>\n            </tfoot>\n          </table>\n        ))  \n      )\n    }\n\n  }\n\n  gameStatusBtn(game){\n    let gameComplete = true;\n    if(game['call'].length === 5){\n      game['call'].forEach((call,index) => {\n      game['call'][index].forEach((round,playerIndex) => {\n        if(game['call'][index][playerIndex] === null || game['result'][index][playerIndex] === null){\n          gameComplete = false;\n        }\n      });\n      });\n    }\n    else{\n      gameComplete = false;\n    }\n\n    if(gameComplete){\n      return ''\n    }\n    else{\n      if(this.state.currentGame ==null){\n        return <input type=\"button\" onClick={()=>this.finishGame(game.gameId)} value=\"Finish\"/>;\n      }\n      else{\n        return '';\n      }\n      \n    }\n    \n  }\n\n  finishGame(gameId){\n    let games = this.state.games;\n    let currentGame = this.state.game;\n    games.forEach((game,index) => {\n      if(game.gameId === gameId){\n        currentGame = game;\n      }\n    });\n    this.setState({currentGame: currentGame});\n    localStorage.setItem('currentGameId',gameId);\n  }\n\n  saveGame(saveGame){\n\n    const gameId = saveGame.gameId;\n    let saveGameIndex = null;\n    let games = JSON.parse(JSON.stringify(this.state.games));\n    games.forEach((game,index) => {\n      if(game.gameId === gameId){\n        saveGameIndex = index;\n      }\n    });\n    if(saveGameIndex !== null){\n      games[saveGameIndex] = saveGame;\n    }\n    else{\n      games.unshift(saveGame);\n    }\n    if(games.length > 10){\n      games = games.splice(0,10);\n    }\n    this.setState({games:games,currentGame:saveGame});\n    localStorage.setItem('games',JSON.stringify(games));\n    localStorage.setItem('currentGameId',saveGame.gameId);\n    \n  }\n\n  getTableRow(game){\n      return (\n        game['call'].map(( round, roundIndex ) => (\n          <tr key={roundIndex}>\n            <td>{roundIndex+1}</td>\n            <td>{ roundPointCalculator(game,roundIndex,0)}</td>\n            <td>{ roundPointCalculator(game,roundIndex,1)}</td>\n            <td>{ roundPointCalculator(game,roundIndex,2)}</td>\n            <td>{ roundPointCalculator(game,roundIndex,3)}</td>\n          </tr>\n        ))\n      )\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
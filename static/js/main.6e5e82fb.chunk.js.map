{"version":3,"sources":["logo.svg","Calculator.js","NewGame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","roundPointCalculator","game","roundIndex","playerIndex","undefined","call","parseInt","result","toString","calculateResult","c","r","pSum","forEach","round","index","item","cIndex","sum","sumNumber","Math","floor","sumDecimal","abs","pNumber","pDecimal","x","totalDecimal","getSum","calculate","parseFloat","NewGame","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","gameId","players","complete","state","editRoundIndex","_this2","react_default","a","createElement","Fragment","class","scope","type","onChange","e","handlePlayerChange","placeholder","onClick","startGame","value","gameResult","clearGameId","map","getItem","rowspan","toFixed","Date","now","setState","onSave","alert","onClearGameId","event","playerValue","target","_this3","getSelectRow","saveItem","editItem","_this4","items","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","entries","Symbol","iterator","next","done","_ref3","_ref2","slicedToArray","push","key","err","return","handleInputChange","roundArray","resultEntry","allEntry","resultSum","resultMessage","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_ref9","_ref5","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_ref8","_ref7","length","React","Component","App","games","localStorage","JSON","parse","Array","from","console","log","currentGameId","Number","currentGameIndex","currentGame","splice","className","NewGame_NewGame","saveGame","getHistory","removeItem","gameIndex","setItem","allGames","allGamesResult","gameStatusBtn","getTableRow","gameComplete","finishGame","_this5","saveGameIndex","stringify","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e5e82fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export  function roundPointCalculator(game,roundIndex, playerIndex){\n\n    if(game['call'][roundIndex] === undefined || !game['call'][roundIndex][playerIndex] ){\n        return '';\n    }\n\n    let call = parseInt(game['call'][roundIndex][playerIndex]);\n\n    if(game['result'][roundIndex] === undefined || !game['result'][roundIndex][playerIndex] ){\n        return call;\n    }\n    let result = parseInt(game['result'][roundIndex][playerIndex]);\n    \n    if(result < call) {\n        return '-' + call;\n    }\n    else if(call === result ){\n        return '' + call.toString() + '.0';\n    }else{\n        return '' + call.toString() + '.' + (result-call);\n    }\n}\n\nexport function calculateResult(game){\n    let \n    pSum =[0.0,0.0,0.0,0.0];\n    let c,r;\n    \n    game['call'].forEach((round,index) =>{\n\n      game['call'][index].forEach((item,cIndex) => {\n         c = game['call'][index][cIndex];\n         r = game['result'][index][cIndex];\n\n         if(!c){\n           pSum[cIndex] = pSum[cIndex] + 0.0;\n         }\n         else if(!r){\n           pSum[cIndex] = pSum[cIndex] + parseFloat(c);\n         }\n         else{\n           pSum[cIndex] = getSum(pSum[cIndex],calculate(parseFloat(c),parseFloat(r)));\n         }\n      });\n    });\n\n    return pSum;\n     \n  }\n\n  function getSum(sum, p){\n\n    let sumNumber = sum < 0 ? Math.floor(sum) : Math.floor(sum);\n    let sumDecimal = Math.abs(sum) - Math.abs(Math.floor(sum));\n\n    let pNumber = p < 0 ?  Math.floor(p) : Math.floor(p);\n    let pDecimal = Math.abs(p) - Math.abs(Math.floor(p));\n\n    let x = sumNumber + pNumber;\n\n    let totalDecimal = sumDecimal + pDecimal;\n\n    \n    if(totalDecimal > 1){\n      x = x + 1 ;\n      totalDecimal = totalDecimal - 1;\n    }\n    if(x < 0 ) {\n      return -1 * (Math.abs(x) + totalDecimal);\n    }else {\n      return x + totalDecimal;\n    }\n\n  }\n\n  function calculate (call, result) {\n    let sum = 0.0;\n    if(result < call) {\n      sum =  - 1 * call;\n    }\n    else if(call === result ){\n      sum = call;\n    }else{\n      sum = call +  (result-call)/10;\n    }\n    return sum;\n  }","import React from 'react';\nimport {roundPointCalculator,calculateResult} from './Calculator.js';\n\nexport default class NewGame extends React.Component {\n\n    constructor(props){\n\n        super(props);\n        let game = props.game;\n        if(game === null){\n            game = {\n                gameId: null,\n                players: [null,null,null,null],\n                call: [[null,null,null,null]],\n                result: [[null,null,null,null]],\n                complete: false\n            }\n        }\n        this.state = {\n            game : game, editRoundIndex: null, players: [null,null,null,null]\n        }\n    }\n\n    render() {\n\n        if(this.state.game.gameId === null){\n            return (\n                <>\n                    <table class=\"table table-dark\">\n                        <thead>\n                        <tr>\n                            <th scope=\"col\"><input type=\"text\" onChange={(e)=>this.handlePlayerChange(e, 0)} placeholder=\"Player 1\"/></th>\n                            <th scope=\"col\"><input type=\"text\" onChange={(e)=>this.handlePlayerChange(e, 1)} placeholder=\"Player 2\"/></th>\n                            <th scope=\"col\"><input type=\"text\" onChange={(e)=>this.handlePlayerChange(e, 2)} placeholder=\"Player 3\"/></th>\n                            <th scope=\"col\"><input type=\"text\" onChange={(e)=>this.handlePlayerChange(e, 3)} placeholder=\"Player 4\"/></th>\n                            <th scope=\"col\"><input type=\"button\" onClick={()=>this.startGame()} value=\"Start Game\"/></th>\n                        </tr>\n                        </thead>\n                    </table>\n                </>\n            )\n        }\n\n        let gameResult = calculateResult(this.state.game);\n        return (\n        <>\n        <table class=\"table table-dark\">\n            <thead>\n              <tr>\n                <th scope=\"col\">Round</th>\n                <th scope=\"col\"></th>\n                <th scope=\"col\">{this.state.game['players'][0]}</th>\n                <th scope=\"col\">{this.state.game['players'][1]}</th>\n                <th scope=\"col\">{this.state.game['players'][2]}</th>\n                <th scope=\"col\">{this.state.game['players'][3]}</th>\n                <th scope=\"col\"><input type=\"button\" onClick={()=>this.clearGameId()} value=\"Save Game\"/></th>\n              </tr>\n            </thead>\n            <tbody>\n               { \n                   this.state.game['call'].map(( round, roundIndex ) => (\n                   this.getItem(round,roundIndex)\n                ))\n                }\n            </tbody>\n            <tfoot>\n              <tr>\n              <td rowspan=\"2\">Result</td>\n              <td></td>\n              <td>{ gameResult[0].toFixed(1) }</td>\n              <td>{ gameResult[1].toFixed(1) }</td>\n              <td>{ gameResult[2].toFixed(1) }</td>\n              <td>{ gameResult[3].toFixed(1) }</td>\n              </tr>\n            </tfoot>\n          </table>\n          </>\n        )\n    }\n\n    startGame(){\n        if(!this.state.game.players[0] || !this.state.game.players[1] || !this.state.game.players[2] || !this.state.game.players[3]){\n            alert('Enter all players');\n        }\n        else{\n            const gameId = Date.now();\n            let game = this.state.game;\n            game.gameId = gameId;\n            this.setState({game:game});\n            this.props.onSave(game);\n        }\n    }\n\n    clearGameId(){\n        this.props.onClearGameId();\n    }\n\n    handlePlayerChange(event,playerIndex) {\n        const playerValue = event.target.value;\n        let game = this.state.game;\n        game.players[playerIndex] = playerValue;\n        this.setState({game:game});\n        \n    }\n\n    getItem (round,roundIndex) {\n        if(this.state.editRoundIndex === roundIndex ){\n            return (\n                <>\n                <tr>\n                    <td rowspan=\"2\">{roundIndex+1}</td>\n                    <td>call</td>\n                    {\n                        this.getSelectRow(true,0,round[0])\n                    }\n                    {\n                        this.getSelectRow(true,1,round[1])\n                    }\n                    {\n                        this.getSelectRow(true,2,round[2])\n                    }\n                    {\n                        this.getSelectRow(true,3,round[3])\n                    }\n                    \n                    <td rowspan=\"2\"><button onClick={()=> {this.saveItem(roundIndex)}}> Save </button></td>\n                </tr>\n                <tr>\n                    \n                    <td>points</td>\n                    {\n                        this.getSelectRow(false,0,this.state.game['result'][roundIndex] && this.state.game['result'][roundIndex][0])\n                    }\n                    {\n                        this.getSelectRow(false,1,this.state.game['result'][roundIndex] && this.state.game['result'][roundIndex][1])\n                    }\n                    {\n                        this.getSelectRow(false,2,this.state.game['result'][roundIndex] && this.state.game['result'][roundIndex][2])\n                    }\n                    {\n                        this.getSelectRow(false,3,this.state.game['result'][roundIndex] && this.state.game['result'][roundIndex][3])\n                    }\n                </tr>\n            </>\n            )\n        }else {\n        \n        return (\n            <tr>\n                <td >{roundIndex+1}</td>\n                <td ></td>\n                <td>{ roundPointCalculator(this.state.game,roundIndex,0)}</td>\n                <td>{ roundPointCalculator(this.state.game,roundIndex,1)}</td>\n                <td>{ roundPointCalculator(this.state.game,roundIndex,2)}</td>\n                <td>{ roundPointCalculator(this.state.game,roundIndex,3)}</td>\n                <td><button onClick={()=> {this.editItem(roundIndex)}}> Edit </button></td>\n            </tr>\n        )\n        }\n    }\n\n    getSelectRow (call,roundIndex, playerValue) {\n        \n        const items = [];\n        for (const [index, value] of [0,1,2,3,4,5,6,7,8,9,10,11,12,13].entries()) {\n            items.push(<option key={index} value={value}>{value}</option>)\n        }\n        return (\n            <td>\n                <select value={playerValue} onChange={(e)=> this.handleInputChange(e,call,roundIndex)}>\n                    <option value=\"\">Select</option>\n                    {items}\n                </select>\n            </td>\n        );\n    }\n\n    handleInputChange(event, call,roundIndex) {\n        const value = event.target.value === \"\" ? null : event.target.value; \n        let roundArray = this.state.game;\n        if(call){\n            roundArray['call'][this.state.editRoundIndex][roundIndex] = value;\n        }else{\n            roundArray['result'][this.state.editRoundIndex][roundIndex] = value;\n        }\n        this.setState({game: roundArray});\n    }\n\n    editItem (roundIndex){\n\n        let roundArray = this.state.game;\n        if(!this.state.game['call'][roundIndex]){\n            roundArray['call'][roundIndex] = [null,null,null,null];\n        }\n        if(!this.state.game['result'][roundIndex]){\n            roundArray['result'][roundIndex] = [null,null,null,null];\n        }\n\n        this.setState({editRoundIndex:roundIndex, game:roundArray});\n    }\n\n    saveItem(roundIndex){\n        let resultEntry = false, allEntry = true, resultSum = 0;\n        let resultMessage = '';\n        for (const [key,value] of this.state.game['result'][this.state.editRoundIndex].entries()) {\n            if(value){\n                resultEntry = true;\n            }\n        }\n        if(resultEntry){\n            for (const [key,value] of this.state.game['result'][this.state.editRoundIndex].entries()) {\n                if(value){\n                    resultSum = resultSum + parseInt(value);\n                }\n                else{\n                    allEntry = false;\n                }\n            }\n        }\n\n        if(resultEntry){\n            if(!allEntry){\n                resultMessage = 'Enter all points';\n            }\n            else if(resultSum !== 13) {\n                \n                resultMessage = 'Sum of all points must be 13';\n            }\n            else{\n                \n                let game = this.state.game;\n                if(game['call'].length < 5){\n                    game['call'].push([null,null,null,null]) ;\n                    game['result'].push([null,null,null,null]);\n                }\n                this.setState({editRoundIndex: null, resultMessage:resultMessage });\n\n            }\n        }\n        else{\n            this.setState({editRoundIndex: null, resultMessage:resultMessage });\n            this.props.onSave(this.state.game);\n        }\n        if(resultMessage !== ''){\n            alert(resultMessage);\n        }\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport NewGame from './NewGame'\nimport './App.css';\nimport {roundPointCalculator,calculateResult} from './Calculator.js';\n\nexport default class App extends React.Component {\n\n  constructor(props){\n    super(props);\n    let games = localStorage.getItem('games') ? JSON.parse(localStorage.getItem('games')) : [];\n    games = Array.from(games);\n    console.log('local storage ',localStorage.getItem('games'));\n    console.log('local storage current game id',localStorage.getItem('currentGameId'));\n    let currentGameId = localStorage.getItem('currentGameId');\n    currentGameId = currentGameId ? Number(currentGameId) : null;\n    let currentGameIndex = null;\n    let currentGame = null;\n    games.forEach((game,index) => {\n      if(game.gameId === currentGameId){\n        currentGameIndex = index;\n        currentGame = game;\n      }\n    });\n    if(currentGameIndex !== null){\n      games.splice(currentGameIndex, 1);\n    }\n    this.state = {games:games,currentGame: currentGame};\n  }\n\n  \n  render () {\n\n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Call Break Counter </h2>\n      </header>\n      <div className=\"container body-container\">\n        <div class=\"row current-game\">\n          {\n            <NewGame onSave={(game)=>this.saveGame(game)} onClearGameId = {()=>this.clearGameId()} game={this.state.currentGame}/>\n          }\n        </div>\n        <div class=\"row\">\n          { \n            this.getHistory()\n          }\n        </div>\n      </div>\n      </div>\n    )\n  }\n\n  clearGameId(){\n\n    let games = games.splice();\n    games\n    .this.setState({currentGame:null});\n    localStorage.removeItem('currentGameId');\n  }\n\n\n\n  setCurrentGameId(gameId){\n    let currentGame = null;\n    this.state.games.forEach((game,gameIndex) => {\n      if(game.gameId === gameId){\n        currentGame = game;\n      }\n    });\n    this.setState({currentGame: currentGame});\n    this.localStorage.setItem('currentGameId',gameId);\n  }\n\n  getHistory(){\n    let allGames = this.state.games;\n    let allGamesResult = [];\n    allGames.forEach((game,index) => {\n      allGamesResult[index] = calculateResult(game);\n    });\n    if(allGames.length){\n      return (\n       allGames.map(( game, gameIndex ) => (\n          <table class=\"table table-dark\">\n            <thead>\n              <tr>\n                <th scope=\"col\">Round</th>\n                <th scope=\"col\">{game['players'][0]}</th>\n                <th scope=\"col\">{game['players'][1]}</th>\n                <th scope=\"col\">{game['players'][2]}</th>\n                <th scope=\"col\">{game['players'][3]}</th>\n                <th scope=\"col\">{this.gameStatusBtn(game)}</th>\n              </tr>\n            </thead>\n            <tbody>\n               { this.getTableRow(game)}\n            </tbody>\n            <tfoot>\n              <tr>\n              <td>Result</td>\n              <td>{allGamesResult[gameIndex][0].toFixed(1)}</td>\n              <td>{allGamesResult[gameIndex][1].toFixed(1)}</td>\n              <td>{allGamesResult[gameIndex][2].toFixed(1)}</td>\n              <td>{allGamesResult[gameIndex][3].toFixed(1)}</td>\n              <td></td>\n              </tr>\n            </tfoot>\n          </table>\n        ))  \n      )\n    }\n    \n  }\n\n  gameStatusBtn(game){\n    let gameComplete = true;\n\n\n    if(game['call'].length === 5){\n      game['call'].forEach((call,index) => {\n      game['call'][index].forEach((round,playerIndex) => {\n        if(game['call'][index][playerIndex] === null || game['result'][index][playerIndex]){\n          gameComplete = false;\n        }\n      });\n      });\n    }\n    else{\n      gameComplete = false;\n    }\n\n    if(gameComplete){\n      return ''\n    }\n    else{\n      return <input type=\"button\" onClick={()=>this.finishGame(game.gameId)} value=\"Finish\"/>;\n    }\n    \n  }\n\n  finishGame(gameId){\n    let currentGame = this.state.currentGame;\n    this.state.games.forEach((game,index) => {\n      \n      if(game.gameId === gameId){\n        this.setState({currentGame: currentGame})\n        currentGame = game;\n      }\n    });\n    \n    localStorage.setItem('currentGameId',gameId);\n  }\n\n  saveGame(saveGame){\n\n    console.log('save game', saveGame);\n    const gameId = saveGame.gameId;\n    let saveGameIndex = null;\n    let games = this.state.games;\n    games.forEach((game,index) => {\n      if(game.gameId === gameId){\n        saveGameIndex = index;\n      }\n    });\n    if(saveGameIndex){\n      games[saveGameIndex] = saveGame;\n    }\n    else{\n      games.push(saveGame);\n    }\n    localStorage.setItem('games',JSON.stringify(games));\n    localStorage.setItem('currentGameId',saveGame.gameId);\n  }\n\n  getTableRow(game){\n      return (\n        game['call'].map(( round, roundIndex ) => (\n          <tr>\n            <td>{roundIndex+1}</td>\n            <td>{ roundPointCalculator(game,roundIndex,0)}</td>\n            <td>{ roundPointCalculator(game,roundIndex,1)}</td>\n            <td>{ roundPointCalculator(game,roundIndex,2)}</td>\n            <td>{ roundPointCalculator(game,roundIndex,3)}</td>\n          </tr>\n        ))\n      )\n  }\n\n  // calcuateRoundPoint(call, result){\n  //   call = parseInt(call);\n  //   result = parseInt(result);\n  //   if(result < call) {\n  //     return '-' + call;\n  //   }\n  //   else if(call === result ){\n  //     return '' + call.toString() + '.0';\n  //   }else{\n  //     return '' + call.toString() + '.' + (result-call);\n  //   }\n  // }\n\n  // calculateResult(game){\n    \n  //   let \n  //   p1sum = 0.0, s1 =0,\n  //   p2sum = 0.0, s2 =0,\n  //   p3sum = 0.0, s3 =0,\n  //   p4sum = 0.0, s4 =0;\n\n  //   game['call'].forEach((round,index) =>{\n\n  //      s1 = game['result'][index] !== undefined ? this.calculate(parseFloat(round[0]), parseFloat(game['result'][index][0])) : parseFloat(round[0]);\n  //      s2 = game['result'][index] !== undefined ? this.calculate(parseFloat(round[1]), parseFloat(game['result'][index][1])) : parseFloat(round[1]);\n  //      s3 = game['result'][index] !== undefined ? this.calculate(parseFloat(round[2]), parseFloat(game['result'][index][2])) : parseFloat(round[2]);\n  //      s4 = game['result'][index] !== undefined ? this.calculate(parseFloat(round[3]), parseFloat(game['result'][index][3])) : parseFloat(round[3]);\n       \n  //      p1sum = this.getSum(p1sum,s1);\n  //      p2sum = this.getSum(p2sum,s2);\n  //      p3sum = this.getSum(p3sum,s3);\n  //      p4sum = this.getSum(p4sum,s4);\n\n  //   });\n    \n  //   return [p1sum.toFixed(1),p2sum.toFixed(1),p3sum.toFixed(1),p4sum.toFixed(1)]\n     \n  // }\n\n  // calculate (call, result) {\n  //   let sum = 0.0;\n  //   if(result < call) {\n  //     sum =  - 1 * call;\n  //   }\n  //   else if(call === result ){\n  //     sum = call;\n  //   }else{\n  //     sum = call +  (result-call)/10;\n  //   }\n  //   return sum;\n  // }\n\n  // getSum(sum, p){\n\n  //   let sumNumber = sum < 0 ? Math.floor(sum) : Math.floor(sum);\n  //   let sumDecimal = Math.abs(sum) - Math.abs(Math.floor(sum));\n\n  //   let pNumber = p < 0 ?  Math.floor(p) : Math.floor(p);\n  //   let pDecimal = Math.abs(p) - Math.abs(Math.floor(p));\n\n  //   let x = sumNumber + pNumber;\n\n  //   let totalDecimal = sumDecimal + pDecimal;\n\n    \n  //   if(totalDecimal > 1){\n  //     x = x + 1 ;\n  //     totalDecimal = totalDecimal - 1;\n  //   }\n  //   if(x < 0 ) {\n  //     return -1 * (Math.abs(x) + totalDecimal);\n  //   }else {\n  //     return x + totalDecimal;\n  //   }\n\n  // }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}